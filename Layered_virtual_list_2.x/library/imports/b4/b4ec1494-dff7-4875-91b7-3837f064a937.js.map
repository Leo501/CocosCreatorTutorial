{"version":3,"sources":["assets\\Script\\LoopList.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import RenderAlternative from \"./RenderAlternative\";\r\n\r\ninterface IBorder {\r\n    leftSide?: number;\r\n    rightSide?: number;\r\n    bottomSide?: number;\r\n    topSide?: number;\r\n    size?: cc.Size;\r\n}\r\ntype TDate = { size?: cc.Size };\r\nexport class ShowNode<T extends TDate> extends cc.Component {\r\n    /**是否初始化过代理组建 */\r\n    private hasInit: boolean = false;\r\n    /**渲染分层开启的挂载节点 */\r\n    public renderLayer: cc.Node;\r\n    /**上级的cell */\r\n    public cell: ItemCell<T>;\r\n    /**数据 */\r\n    public data: T;\r\n    /**初始化 */\r\n    public init(cell: ItemCell<T>, data: T, renderLayer: cc.Node) {\r\n        this.cell = cell;\r\n        this.data = data;\r\n        if (this.renderLayer != renderLayer) {\r\n            this.renderLayer = renderLayer;\r\n            renderLayer && this.initRenders();\r\n        }\r\n        this.initShow();\r\n    }\r\n    /**初始化操作 */\r\n    initShow() { }\r\n    /**被回收，应该做一些释放的操作 */\r\n    onRecircle() { }\r\n\r\n    /**\r\n     * 在特定时间内进行大小变化\r\n     * @param targetSize \r\n     * @param time \r\n     */\r\n    public resize(targetSize: cc.Size, time: number = 0.3) {\r\n        this.cell.resize(targetSize, time);\r\n    }\r\n    /**\r\n     * 处理分层代理渲染\r\n     */\r\n    private initRenders() {\r\n        if (!this.hasInit && this.renderLayer) {\r\n            let propMap: WeakMap<RenderAlternative, boolean> = new WeakMap();\r\n            let keys = Object.keys(this);\r\n            for (let i = 0, len = keys.length; i < len; ++i) {\r\n                let value = this[keys[i]];\r\n                let alternative: RenderAlternative = null;\r\n                if (value instanceof cc.Node) {\r\n                    alternative = value.getComponent(RenderAlternative);\r\n                    if (alternative) {\r\n                        alternative.init(this.renderLayer);\r\n                    }\r\n                } else if (value instanceof cc.RenderComponent) {\r\n                    alternative = value.getComponent(RenderAlternative);\r\n                    if (alternative) {\r\n                        this[keys[i]] = alternative.init<typeof value>(this.renderLayer);\r\n                    }\r\n                }\r\n                alternative && propMap.set(alternative, true);\r\n            }\r\n            this.dealChilrenAlternative(this.node, propMap, 0, 0);\r\n            this.hasInit = true;\r\n        }\r\n    }\r\n    /**\r\n     * 处理子节点代理\r\n     * @param node \r\n     * @param propMap 记录脚本已经处理过的属性代理\r\n     * @param parentSindex 父节点的所在的顺序\r\n     * @param depth 深度\r\n     */\r\n    dealChilrenAlternative(node: cc.Node, propMap: WeakMap<RenderAlternative, boolean>, parentSindex: number, depth: number) {\r\n        for (let i = 0, len = node.children.length; i < len; i++) {\r\n            let children = node.children[i];\r\n            let alternative = children.getComponent(cc.RenderComponent)?.getComponent(RenderAlternative);\r\n            let sIndex = parentSindex + (i * Math.pow(0.1, depth));\r\n            if (alternative) {\r\n                if ((!propMap.has(alternative) || !propMap.get(alternative))) {\r\n                    alternative.init(this.renderLayer);\r\n                }\r\n                alternative.sIndex = sIndex;\r\n            }\r\n            this.dealChilrenAlternative(children, propMap, sIndex, depth + 1);\r\n        }\r\n    }\r\n}\r\nexport class ItemCell<T extends TDate> {\r\n    /**持有cell的list */\r\n    public looplist: LoopList<T> = null;\r\n    /**位置节点 */\r\n    public node: cc.Node = null;\r\n    /**显示节点 */\r\n    public showNode: ShowNode<T> = null;\r\n    /**尺寸 */\r\n    public size: cc.Size = null;\r\n    /**数据下标 */\r\n    public dataIndex: number = null;\r\n    /**cell下标 */\r\n    public cellIndex: number = null;\r\n    /**数据 */\r\n    public data: T = null;\r\n    /**\r\n     * 构造函数\r\n     * @param node \r\n     * @param looplist \r\n     */\r\n    constructor(node: cc.Node, looplist: LoopList<T>) {\r\n        this.node = node;\r\n        this.looplist = looplist;\r\n    }\r\n\r\n    /**\r\n     * 初始化\r\n     * @param data \r\n     * @param size \r\n     * @param dataIndex \r\n     * @param cellIndex \r\n     * @param looplist \r\n     */\r\n    public init(data: T, size: cc.Size, dataIndex: number, cellIndex: number, looplist: LoopList<T>) {\r\n        cc.Tween.stopAllByTarget(this.node);\r\n        this.cellIndex = cellIndex;\r\n        this.dataIndex = dataIndex;\r\n        this.looplist = looplist;\r\n        this.node.width = size.width;\r\n        this.node.height = size.height;\r\n        this.data = data;\r\n        this.size = size;\r\n    }\r\n    /**\r\n     * 重置大小\r\n     * @param size \r\n     */\r\n    resize(size: cc.Size, time: number) {\r\n        let nodeSides = getNodeBorder(this, [true, true, true, true]);\r\n        let changeSize = cc.size(size.width - this.size.width, size.height - this.size.height);\r\n        this.size = size;\r\n        this.looplist.dealChangeSize(this, nodeSides, changeSize, time).then(() => {\r\n            this.node.width = size.width;\r\n            this.node.height = size.height;\r\n            this.looplist.updateNodes();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 更新节点显示\r\n     * @param isShow 是否显示\r\n     * @param prefab 需要显示的节点的预制件（也可以是节点，或者预制件url,生成方式自由改动）\r\n     * @param cacheNode 对象池中的显示节点\r\n     * @param renderLayer 分层节点\r\n     */\r\n    updateShow(isShow: boolean, prefab: cc.Prefab, cacheNode: ShowNode<T>, renderLayer: cc.Node) {\r\n        if (isShow) {\r\n            //当前没有显示节点\r\n            if (!this.showNode) {\r\n                //如果是临时对象池还有节点则重用\r\n                if (cacheNode) {\r\n                    this.showNode = cacheNode;\r\n                } else {//否则使用传入的预制件进行生成\r\n                    this.showNode = cc.instantiate(prefab).getComponent(ShowNode);\r\n                }\r\n                this.showNode.node.setParent(this.node);\r\n                this.showNode.node.position = cc.v3();\r\n                this.updateShowNode(renderLayer);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 更新showNode节点显示\r\n     * @param renderLayer \r\n     */\r\n    updateShowNode(renderLayer: cc.Node) {\r\n        //当前有显示节点\r\n        if (this.showNode) {\r\n            this.showNode.init(this, this.data, renderLayer);\r\n        }\r\n    }\r\n\r\n    get hasNoNode() {\r\n        return !this.showNode;\r\n    }\r\n\r\n    recircle() {\r\n        if (this.showNode) {\r\n            let node = this.showNode;\r\n            this.showNode.getComponent(ShowNode).onRecircle();\r\n            this.showNode.node.removeFromParent(false);\r\n            this.showNode = null;\r\n            return node;\r\n        }\r\n    }\r\n\r\n\r\n    destroy() {\r\n        this.node.destroy();\r\n        this.node = null;\r\n        this.looplist = null;\r\n    }\r\n\r\n    /**\r\n     * 失去\r\n     * @returns \r\n     */\r\n    lostShowNode() {\r\n        if (this.showNode) {\r\n            let node = this.showNode;\r\n            this.showNode.node.removeFromParent(false);\r\n            this.showNode = null;\r\n            return node;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取显示节点\r\n     * @param showNode \r\n     */\r\n    getShowNode(showNode: ShowNode<T>) {\r\n        this.showNode = showNode;\r\n        showNode.node.setParent(this.node);\r\n        this.showNode.cell = this;\r\n    }\r\n}\r\n\r\n/**\r\n * 目前列表注意事项\r\n * 1.开启cellMaxNum后不能一行多列或者一列多行，只能单行或者单列\r\n */\r\nexport default class LoopList<T extends TDate> {\r\n    public static insMap: Map<string, LoopList<any>> = new Map();\r\n    public static ins<T>(listName: string): LoopList<T> {\r\n        if (!this.insMap.has(listName)) {\r\n            this.insMap.set(listName, new LoopList<T>());\r\n        }\r\n        return this.insMap.get(listName) as LoopList<T>;\r\n    }\r\n    /**分层节点（只有在showNode中挂载了RenderAlternative才能起作用） */\r\n    private renderLayer: cc.Node = null;\r\n    /**滚动组件 */\r\n    private scrollView: cc.ScrollView = null;\r\n    /**cell节点最大数量 */\r\n    private cellMaxNum: number = null;\r\n    /**当前起点 */\r\n    private curStartIndex: number = null;\r\n    /**数据 */\r\n    private datas: T[] = [];\r\n    /**item节点们 */\r\n    private itemCells: ItemCell<T>[] = [];\r\n    /**预制件 */\r\n    private prefab: cc.Prefab = null;\r\n    /**显示节点的池子 */\r\n    private showNodePool: ShowNode<T>[] = [];\r\n    /**边缘数据 */\r\n    private viewSides: IBorder = {};\r\n    /**上一帧滚动容器的坐标 */\r\n    public lastPos: cc.Vec3 = null;\r\n    /**刷新显示的间隔次数 */\r\n    public updateInv: number = 0;\r\n    /**循环切换的最后一次时间 */\r\n    public lastChange: number = 0;\r\n    /**通用尺寸 */\r\n    public size: cc.Size = null;\r\n    /**通用锚点 */\r\n    public anchor: cc.Vec2 = null;\r\n\r\n    onLoad() {\r\n        this.updateBorder()\r\n    }\r\n\r\n    /**\r\n     * 更新边界\r\n     */\r\n    public updateBorder() {\r\n        let view = this.scrollView.node.getChildByName(\"view\");\r\n        view.anchorX = this.scrollView.content.anchorX;\r\n        view.anchorY = this.scrollView.content.anchorY;\r\n        //修改锚点之后下一帧世界坐标才会更新，没办法只能等一帧了\r\n        return new Promise<void>((resolve, reject) => {\r\n            requestAnimationFrame(() => {\r\n                let wpos = getNodeWPos(view);\r\n                //显示区域左边缘\r\n                let leftSide = wpos.x - (view.width * view.anchorX);\r\n                //显示区域右边缘\r\n                let rightSide = wpos.x + (view.width * (1 - view.anchorX));\r\n                //显示区域下边缘\r\n                let bottomSide = wpos.y - (view.height * view.anchorY);\r\n                //显示区域上边缘\r\n                let topSide = wpos.y + (view.height * (1 - view.anchorY));\r\n                this.viewSides = {\r\n                    leftSide, rightSide, bottomSide, topSide, size: cc.size(view.width, view.height)\r\n                };\r\n                this.scrollView.content.setPosition(cc.v3(0, 0));\r\n                resolve();\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    /**\r\n     * 初始化滚动列表\r\n     * @param scrollView \r\n     * @param cellMaxNum cell节点的最大数量,设置成null则不启用，启用的话，要设置成（可视窗刚好能显示的最大数量*2）+2，假设最多能看到10个节点，那么设置成22\r\n     * @param renderLayer 渲染分层的父节点，如果传入则可以配合showNode上的renderAlternative来进行渲染分层\r\n     */\r\n    async init(scrollView: cc.ScrollView, renderLayer?: cc.Node, cellMaxNum?: number) {\r\n        cellMaxNum && (this.cellMaxNum = cellMaxNum);\r\n        renderLayer && (this.renderLayer = renderLayer);\r\n        this.scrollView = scrollView;\r\n        await this.updateBorder();\r\n        this.scrollView.node.on(\"scrolling\", this.scrollingListener, this);\r\n    }\r\n\r\n    /**滚动监听 */\r\n    scrollingListener() {\r\n        this.updateInv--;\r\n        if (this.updateInv <= 0) {\r\n            this.updateInv = 2;\r\n            let showCells = this.updateNodes();\r\n\r\n            if (!this.cellMaxNum) {\r\n                return;\r\n            }\r\n            if (!this.lastPos) {\r\n                this.lastPos = this.scrollView.content.position.clone();\r\n            } else {\r\n                let offset = this.scrollView.content.position.clone().sub(this.lastPos);\r\n                this.lastPos = this.scrollView.content.position.clone();\r\n                let now = cc.sys.now();\r\n                if (!this.lastChange || (now - this.lastChange) > 100) {\r\n                    this.lastChange = now;\r\n                    this.dealLoopList(offset, showCells);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 初始化\r\n     * @param data 数据组\r\n     * @param prefab 预制件\r\n     * @param size 通用尺寸\r\n     * @param anchor cell的锚点\r\n     */\r\n    public initData(data: T[], prefab: cc.Prefab, size?: cc.Size, anchor: cc.Vec2 = cc.v2(0.5, 0.5)) {\r\n        this.datas = data;\r\n        this.size = size;\r\n        this.anchor = anchor;\r\n        this.prefab = prefab;\r\n        let len = this.cellMaxNum ? this.cellMaxNum : data.length;\r\n        this.curStartIndex = 0;\r\n        for (let i = 0; i < len; ++i) {\r\n            let itemCell = this.itemCells[i];\r\n            if (!itemCell) {\r\n                let node = new cc.Node('LoopListCell')\r\n                itemCell = this.itemCells[i] = new ItemCell<T>(node, this);\r\n                node.setAnchorPoint(anchor);\r\n                node.setParent(this.scrollView.content);\r\n            }\r\n            let data = this.datas[this.curStartIndex + i];\r\n            let cellSize = data.size ? data.size : size;\r\n            itemCell.init(data, cellSize, this.curStartIndex + i, i, this);\r\n        }\r\n        for (let i = data.length, len = this.itemCells.length; i < len; ++i) {\r\n            this.recircleShowNode(this.itemCells[i].recircle());\r\n            this.itemCells[i].destroy()\r\n            this.itemCells[i] = null;\r\n        }\r\n        this.updateNodes();\r\n    }\r\n\r\n    /**\r\n     * 压入新的数据\r\n     * @param datas \r\n     */\r\n    public pushDatas(datas: T[]) {\r\n        let length = this.datas.length;\r\n        for (let i = 0, len = datas.length; i < len; ++i) {\r\n            let data = datas[i];\r\n            this.datas.push(data);\r\n            let index = length + i;\r\n            this.addNodeFromIndex(index);\r\n        }\r\n    }\r\n    /**\r\n     * 插入新的数据\r\n     * @param data \r\n     * @param insertIndex \r\n     */\r\n    public insertData(data: T, insertIndex: number) {\r\n        if (this.datas.length >= insertIndex) {\r\n            this.datas.splice(insertIndex, 0, data);\r\n            this.addNodeFromIndex(insertIndex);\r\n        } else {\r\n            this.pushDatas([data]);\r\n        }\r\n    }\r\n    /**\r\n     * 移除对应数据\r\n     * @param removeIndex \r\n     */\r\n    public removeData(removeIndex: number) {\r\n        if (this.datas.length >= removeIndex) {\r\n            this.datas.splice(removeIndex, 1);\r\n            if (this.cellMaxNum) {\r\n                let cellIndex = removeIndex - this.curStartIndex;\r\n                //在使用范围内\r\n                if (cellIndex >= 0 && cellIndex < this.cellMaxNum) {\r\n                    let itemCell = this.itemCells[cellIndex];\r\n                    let nodeSides = getNodeBorder(itemCell, [true, true, true, true]);\r\n                    let changeSize = cc.size(-itemCell.size.width, -itemCell.size.height);\r\n                    itemCell.size = cc.size(0, 0);\r\n                    this.dealChangeSize(itemCell, nodeSides, changeSize).then(() => {\r\n                        //更新数据\r\n                        for (let i = cellIndex; i < this.cellMaxNum; i++) {\r\n                            let curDataIndex = this.curStartIndex + i;\r\n                            let curData = this.datas[curDataIndex];\r\n                            let curCellSize: cc.Size = curData.size ? curData.size : this.size;\r\n                            this.itemCells[i].init(curData, curCellSize, curDataIndex, i, this);\r\n                            this.itemCells[i].updateShowNode(this.renderLayer);\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                let itemCell = this.itemCells.splice(removeIndex, 1)[0];\r\n                let nodeSides = getNodeBorder(itemCell, [true, true, true, true]);\r\n                let changeSize = cc.size(-itemCell.size.width, -itemCell.size.height);\r\n                itemCell.size = cc.size(0, 0);\r\n                this.dealChangeSize(itemCell, nodeSides, changeSize).then(() => {\r\n                    this.recircleShowNode(itemCell.recircle())\r\n                    itemCell.node.destroy();\r\n                });\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 从某个数据开始更新\r\n     * @param dataIndex \r\n     */\r\n    private async addNodeFromIndex(dataIndex: number) {\r\n        let data = this.datas[dataIndex];\r\n        let cellSize: cc.Size = data.size ? data.size : this.size;\r\n        //是否开启cell循环\r\n        if (this.cellMaxNum) {\r\n            let cellIndex = dataIndex - this.curStartIndex;\r\n            //在使用范围内\r\n            if (cellIndex >= 0 && cellIndex < this.cellMaxNum) {\r\n                //更新数据\r\n                for (let i = cellIndex; i < this.cellMaxNum; i++) {\r\n                    let curDataIndex = this.curStartIndex + i;\r\n                    let curData = this.datas[curDataIndex];\r\n                    let curCellSize: cc.Size = curData.size ? curData.size : this.size;\r\n                    this.itemCells[i].init(curData, curCellSize, curDataIndex, i, this);\r\n                    this.itemCells[i].updateShowNode(this.renderLayer);\r\n                }\r\n                //获取当前的位置\r\n                let nodeSides: IBorder = null;\r\n                let itemCell: ItemCell<T> = this.itemCells[cellIndex];\r\n                if (itemCell) {\r\n                    nodeSides = getNodeBorder(itemCell, [true, true, true, true]);\r\n                    itemCell.node.width = 0;\r\n                    itemCell.node.height = 0;\r\n                    this.dealChangeSize(itemCell, nodeSides, cellSize).then(() => {\r\n                        itemCell.node.width = cellSize.width;\r\n                        itemCell.node.height = cellSize.height;\r\n                    });\r\n                }\r\n            }\r\n        } else {\r\n            //获取当前的位置\r\n            let nodeSides: IBorder = null;\r\n            if (this.itemCells[dataIndex]) {\r\n                nodeSides = getNodeBorder(this.itemCells[dataIndex], [true, true, true, true]);\r\n            }\r\n            let node = new cc.Node('LoopListCell')\r\n            node.setAnchorPoint(this.anchor);\r\n            node.setParent(this.scrollView.content);\r\n            node.setSiblingIndex(dataIndex);\r\n            let itemCell: ItemCell<T> = new ItemCell<T>(node, this);\r\n            this.itemCells.splice(dataIndex, 0, itemCell)\r\n            itemCell.init(data, cellSize, dataIndex, dataIndex, this);\r\n            if (!nodeSides) {\r\n                await new Promise<void>((resolve, reject) => {\r\n                    requestAnimationFrame(() => {\r\n                        nodeSides = getNodeBorder(itemCell, [true, true, true, true]);\r\n                        resolve();\r\n                    })\r\n                });\r\n            }\r\n            if (nodeSides) {\r\n                itemCell.node.width = 0;\r\n                itemCell.node.height = 0;\r\n                this.dealChangeSize(itemCell, nodeSides, cellSize).then(() => {\r\n                    itemCell.node.width = cellSize.width;\r\n                    itemCell.node.height = cellSize.height;\r\n                });\r\n            }\r\n            this.dealItemShow(itemCell);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理列表的循环利用\r\n     * @param offset \r\n     * @param dataIndexs \r\n     */\r\n    private dealLoopList(offset: cc.Vec3, showCells: ItemCell<T>[]) {\r\n        let startCell = showCells[0];\r\n        let endCell = showCells[showCells.length - 1];\r\n        if (this.scrollView.vertical) {\r\n            /**内容上移 */\r\n            if (offset.y > 0) {\r\n                //已经到达最后倒数第二个节点并且还有数据\r\n                if (this.scrollView.content.y >= (- this.itemCells[this.itemCells.length - 2].node.y - this.viewSides.size.height) && endCell.dataIndex < this.datas.length - 2) {\r\n                    //显示开始数据下标(这里-1是想要顶部留一个itemcell做缓冲)\r\n                    let showStart = startCell.dataIndex - 1;\r\n                    //剩余可展示的数据量 \r\n                    let leave = this.datas.length - showStart;\r\n                    //计算应该从那个位置开始重新赋值，因为如果直接移动到最上方，数据量不够覆盖所有的cell\r\n                    let cellStartIndex = Math.max(0, this.itemCells.length - leave);\r\n                    //计算第一个cell的数据下标\r\n                    this.curStartIndex = showStart - cellStartIndex;\r\n\r\n                    let cellTop = getNodeBorder(this.itemCells[startCell.cellIndex], [true]).topSide;\r\n\r\n                    let contentHeight = 0;\r\n                    let targetY = 0;\r\n                    let jumpFirst = true;\r\n                    let showIndex = 0;\r\n                    for (let i = 0, len = this.itemCells.length; i < len; ++i) {\r\n                        if (i >= cellStartIndex) {\r\n                            //将当前已经显示的showNode节点直接重新设置到移动后的节点上\r\n                            if (showIndex < showCells.length && !jumpFirst) {\r\n                                if (showIndex == 0) {\r\n                                    targetY = contentHeight;\r\n                                }\r\n                                let showNode = showCells[showIndex].lostShowNode();\r\n                                showIndex++;\r\n                                this.itemCells[i].getShowNode(showNode);\r\n                            }\r\n                            jumpFirst = false;\r\n                        }\r\n                        let dataIndex = this.curStartIndex + i;\r\n                        let data = this.datas[dataIndex];\r\n                        let cellSize = data.size ? data.size : this.size;\r\n                        contentHeight += cellSize.height;\r\n                        this.itemCells[i].init(data, cellSize, dataIndex, i, this);\r\n                    }\r\n\r\n                    //将content的位置移动到最上方并对齐移动前的状态\r\n                    let posY = targetY + (cellTop - this.viewSides.topSide)\r\n                    this.scrollView.content.setPosition(cc.v3(this.scrollView.content.position.x, posY));\r\n                    this.scrollView.scrollToOffset(cc.v2(0, posY + endCell.size.height), 1)\r\n                    this.lastPos = null;\r\n                }\r\n            } //内容下移\r\n            else if (offset.y < 0) {\r\n                //已经到达第二个节点并且还有数据\r\n                if (this.scrollView.content.y < (- this.itemCells[2].node.y) && startCell.dataIndex > 1) {\r\n                    //展示的最后一个数据下表，+1是为了在底部预留一部分空间\r\n                    let showEndIndex = endCell.dataIndex + 1;\r\n                    //计算应该从那个位置开始重新赋值，因为如果直接移动到最下方，数据量不够覆盖所有的cell\r\n                    let cellEndIndex = Math.min(this.itemCells.length - 2, showEndIndex - 1);\r\n                    //计算第一个cell的数据下标\r\n                    this.curStartIndex = Math.max(showEndIndex - (this.itemCells.length - 1), 0);\r\n\r\n                    //将content的位置移动到最下方并对齐移动前的状态\r\n                    let cellTop = getNodeBorder(this.itemCells[startCell.cellIndex], [true]).topSide;\r\n\r\n                    let contentHeight = 0;\r\n                    let showIndex = showCells.length - 1;\r\n                    for (let i = this.itemCells.length - 1; i >= 0; --i) {\r\n                        if (i <= cellEndIndex) {\r\n                            //将当前已经显示的showNode节点直接重新设置到移动后的节点上\r\n                            if (showIndex >= 0) {\r\n                                let showNode = showCells[showIndex].lostShowNode();\r\n                                showIndex--;\r\n                                this.itemCells[i].getShowNode(showNode);\r\n                            } else {\r\n                                showIndex--;\r\n                            }\r\n                        }\r\n                        let dataIndex = this.curStartIndex + i;\r\n                        let data = this.datas[dataIndex];\r\n                        let cellSize = data.size ? data.size : this.size;\r\n                        if (showIndex < -1) {\r\n                            contentHeight += cellSize.height;\r\n                        }\r\n                        this.itemCells[i].init(data, cellSize, dataIndex, i, this);\r\n                    }\r\n\r\n                    //将content的位置移动到最下方并对齐移动前的状态\r\n                    let posY = contentHeight + (cellTop - this.viewSides.topSide)\r\n                    this.scrollView.content.setPosition(cc.v3(this.scrollView.content.position.x, posY));\r\n                    this.scrollView.scrollToOffset(cc.v2(0, posY - startCell.size.height), 1)\r\n                    this.lastPos = null;\r\n                }\r\n            }\r\n        } else if (this.scrollView.horizontal) {\r\n            if (offset.x < 0) {\r\n                //已经到达最后倒数第二个节点并且还有数据\r\n                if (this.scrollView.content.x <= (- (this.itemCells[this.itemCells.length - 2].node.x - this.viewSides.size.width)) && endCell.dataIndex < this.datas.length - 2) {\r\n                    //显示开始数据下标(这里-1是想要左侧留一个itemcell做缓冲)\r\n                    let showStart = startCell.dataIndex - 1;\r\n                    //剩余可展示的数据量 \r\n                    let leave = this.datas.length - showStart;\r\n                    //计算应该从那个位置开始重新赋值，因为如果直接移动到最左侧，数据量不够覆盖所有的cell\r\n                    let cellStartIndex = Math.max(0, this.itemCells.length - leave);\r\n                    //计算第一个cell的数据下标\r\n                    this.curStartIndex = showStart - cellStartIndex;\r\n\r\n                    let cellLeft = getNodeBorder(this.itemCells[startCell.cellIndex], [false, false, true]).leftSide;\r\n\r\n                    let contentWidth = 0;\r\n                    let targetX = 0;\r\n                    let jumpFirst = true;\r\n                    let showIndex = 0;\r\n                    for (let i = 0, len = this.itemCells.length; i < len; ++i) {\r\n                        if (i >= cellStartIndex) {\r\n                            //将当前已经显示的showNode节点直接重新设置到移动后的节点上\r\n                            if (showIndex < showCells.length && !jumpFirst) {\r\n                                if (showIndex == 0) {\r\n                                    targetX = contentWidth;\r\n                                }\r\n                                let showNode = showCells[showIndex].lostShowNode();\r\n                                showIndex++;\r\n                                this.itemCells[i].getShowNode(showNode);\r\n                            }\r\n                            jumpFirst = false;\r\n                        }\r\n                        let dataIndex = this.curStartIndex + i;\r\n                        let data = this.datas[dataIndex];\r\n                        let cellSize = data.size ? data.size : this.size;\r\n                        contentWidth += cellSize.width;\r\n                        this.itemCells[i].init(data, cellSize, dataIndex, i, this);\r\n                    }\r\n\r\n                    //将content的位置移动到最左侧并对齐移动前的状态\r\n                    let posX = (cellLeft - this.viewSides.leftSide) - targetX;\r\n                    this.scrollView.content.setPosition(cc.v3(posX, this.scrollView.content.position.y));\r\n                    this.scrollView.scrollToOffset(cc.v2(-(posX - endCell.size.width), 0), 1)\r\n                    this.lastPos = null;\r\n                }\r\n            } else if (offset.x > 0) {\r\n                //已经到达第二个节点并且还有数据\r\n                if (this.scrollView.content.x > (-this.itemCells[2].node.x) && startCell.dataIndex > 1) {\r\n                    //展示的最后一个数据下表，+1是为了在右侧预留一部分空间\r\n                    let showEndIndex = endCell.dataIndex + 1;\r\n                    //计算应该从那个位置开始重新赋值，因为如果直接移动到最右侧，数据量不够覆盖所有的cell\r\n                    let cellEndIndex = Math.min(this.itemCells.length - 2, showEndIndex - 1);\r\n                    //计算第一个cell的数据下标\r\n                    this.curStartIndex = Math.max(showEndIndex - (this.itemCells.length - 1), 0);\r\n\r\n                    //将content的位置移动到最右侧并对齐移动前的状态\r\n                    let cellLeft = getNodeBorder(this.itemCells[startCell.cellIndex], [false, false, true]).leftSide;\r\n\r\n                    let contentWidth = 0;\r\n                    let showIndex = showCells.length - 1;\r\n                    for (let i = this.itemCells.length - 1; i >= 0; --i) {\r\n                        if (i <= cellEndIndex) {\r\n                            //将当前已经显示的showNode节点直接重新设置到移动后的节点上\r\n                            if (showIndex >= 0) {\r\n                                let showNode = showCells[showIndex].lostShowNode();\r\n                                showIndex--;\r\n                                this.itemCells[i].getShowNode(showNode);\r\n                            } else {\r\n                                showIndex--;\r\n                            }\r\n                        }\r\n                        let dataIndex = this.curStartIndex + i;\r\n                        let data = this.datas[dataIndex];\r\n                        let cellSize = data.size ? data.size : this.size;\r\n                        if (showIndex < -1) {\r\n                            contentWidth += cellSize.width;\r\n                        }\r\n                        this.itemCells[i].init(data, cellSize, dataIndex, i, this);\r\n                    }\r\n\r\n                    //将content的位置移动到最右侧并对齐移动前的状态\r\n                    let posX = (cellLeft - this.viewSides.leftSide) - contentWidth;\r\n                    this.scrollView.content.setPosition(cc.v3(posX, this.scrollView.content.position.y));\r\n                    this.scrollView.scrollToOffset(cc.v2(- (posX + startCell.size.width), 0), 1)\r\n                    this.lastPos = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**更新节点的显示 */\r\n    public updateNodes() {\r\n        let showCells: ItemCell<T>[] = [];\r\n        for (let i = 0, len = this.itemCells.length; i < len; ++i) {\r\n            let itemCell = this.itemCells[i];\r\n            let isShow = this.dealItemShow(itemCell)\r\n            if (isShow) {\r\n                showCells.push(itemCell)\r\n            }\r\n        }\r\n        return showCells;\r\n    }\r\n\r\n    /**\r\n     * 处理cell的显示隐藏\r\n     * @param itemCell \r\n     */\r\n    private dealItemShow(itemCell: ItemCell<T>) {\r\n        if (itemCell) {\r\n            let isShow = this.checkInView(itemCell);\r\n            if (isShow) {\r\n                itemCell.hasNoNode && itemCell.updateShow(isShow, this.prefab, this.showNodePool.length > 0 ? this.showNodePool.pop() : null, this.renderLayer);\r\n            } else {\r\n                !itemCell.hasNoNode && this.recircleShowNode(itemCell.recircle());\r\n            }\r\n            return isShow;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * 检查是否在屏幕内\r\n     * @param node \r\n     * @returns \r\n     */\r\n    private checkInView(itemCell: ItemCell<T>) {\r\n        let nodeSides = getNodeBorder(itemCell, [true, true, true, true]);\r\n        //节点右侧边缘在屏幕左侧外面或者节点左边缘在屏幕右侧外面 则不在显示区域\r\n        let horizontalOutside = nodeSides.rightSide < this.viewSides.leftSide\r\n            || nodeSides.leftSide > this.viewSides.rightSide;\r\n\r\n        let verticalOutside = false;\r\n        if (!horizontalOutside) {\r\n            //节点上边缘在屏幕下方外面或者节点下边缘在屏幕上方外面 则不在显示区域\r\n            verticalOutside = nodeSides.topSide < this.viewSides.bottomSide\r\n                || nodeSides.bottomSide > this.viewSides.topSide;\r\n        }\r\n        return !horizontalOutside && !verticalOutside;\r\n    }\r\n    /**\r\n     * 处理变化的大小\r\n     * @param cell \r\n     * @param nodeSides \r\n     * @param changeSize \r\n     */\r\n    public async dealChangeSize(cell: ItemCell<T>, nodeSides: IBorder, changeSize: cc.Size, time: number = 0.3) {\r\n        let topToBottomFulfill = (this.scrollView.content.anchorY == 1 && nodeSides.bottomSide >= this.viewSides.topSide);\r\n        let bottomToTopFulfill = (this.scrollView.content.anchorY == 0 && nodeSides.topSide <= this.viewSides.bottomSide);\r\n        if (topToBottomFulfill || bottomToTopFulfill) {\r\n            if (topToBottomFulfill) {\r\n                this.scrollView.setContentPosition(cc.v2(this.scrollView.content.x, this.scrollView.content.y + changeSize.height))\r\n            } else {\r\n                this.scrollView.setContentPosition(cc.v2(this.scrollView.content.x, this.scrollView.content.y - changeSize.height))\r\n            }\r\n        }\r\n        let leftToRightFulfill = (this.scrollView.content.anchorX == 0 && nodeSides.rightSide <= this.viewSides.leftSide);\r\n        let RightToLeftFulfill = (this.scrollView.content.anchorX == 1 && nodeSides.leftSide >= this.viewSides.rightSide);\r\n        if (leftToRightFulfill || RightToLeftFulfill) {\r\n            if (RightToLeftFulfill) {\r\n                this.scrollView.setContentPosition(cc.v2(this.scrollView.content.x + changeSize.width, this.scrollView.content.y))\r\n            } else {\r\n                this.scrollView.setContentPosition(cc.v2(this.scrollView.content.x - changeSize.width, this.scrollView.content.y))\r\n            }\r\n        }\r\n        if (!(topToBottomFulfill || bottomToTopFulfill || leftToRightFulfill || RightToLeftFulfill)) {\r\n            cc.Tween.stopAllByTarget(cell.node);\r\n            await new Promise<void>((resolve, reject) => {\r\n                cc.tween(cell.node).to(time, { width: cell.size.width, height: cell.size.height }).call(() => {\r\n                    resolve();\r\n                }).start();\r\n            })\r\n        }\r\n        this.updateNodes();\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 回收显示节点\r\n     * @param node \r\n     */\r\n    private recircleShowNode(node: ShowNode<T>) {\r\n        node && this.showNodePool.push(node);\r\n    }\r\n\r\n    /**\r\n     * 释放当前列表\r\n     */\r\n    public freeList() {\r\n        this.scrollView.node.off(\"scrolling\", this.scrollingListener);\r\n        for (let i = 0, len = this.itemCells.length; i < len; ++i) {\r\n            this.recircleShowNode(this.itemCells[i].recircle());\r\n            this.itemCells[i].destroy();\r\n        }\r\n        this.itemCells = [];\r\n        for (let index = 0, len = this.showNodePool.length; index < len; ++index) {\r\n            this.showNodePool[index].destroy();\r\n        }\r\n        this.showNodePool = [];\r\n        this.renderLayer = null;\r\n        this.scrollView = null;\r\n        this.prefab = null;\r\n    }\r\n\r\n}\r\n/**\r\n * 获取节点的边缘\r\n * @param node \r\n * @param needArr 顺序是上 下 左 右\r\n */\r\nfunction getNodeBorder(cell: ItemCell<any>, needArr: boolean[]) {\r\n    let node = cell.node\r\n    let boderData: IBorder = {};\r\n    let wpos = getNodeWPos(node);\r\n    //显示区域上边缘\r\n    if (needArr[0]) {\r\n        boderData.topSide = wpos.y + (node.height * (1 - node.anchorY));\r\n    }\r\n    //显示区域下边缘\r\n    if (needArr[1]) {\r\n        boderData.bottomSide = wpos.y - (node.height * node.anchorY);\r\n    }\r\n    //显示区域左边缘\r\n    if (needArr[2]) {\r\n        boderData.leftSide = wpos.x - (node.width * node.anchorX);\r\n    }\r\n    //显示区域右边缘\r\n    if (needArr[3]) {\r\n        boderData.rightSide = wpos.x + (node.width * (1 - node.anchorX));\r\n    }\r\n    boderData.size = cc.size(node.width, node.height);\r\n    return boderData;\r\n}\r\n\r\n/**\r\n * 获取节点世界坐标\r\n * @param node \r\n * @returns \r\n */\r\nfunction getNodeWPos(node: cc.Node) {\r\n    return node.parent.convertToWorldSpaceAR(node.position);\r\n}\r\n\r\n\r\n"]}